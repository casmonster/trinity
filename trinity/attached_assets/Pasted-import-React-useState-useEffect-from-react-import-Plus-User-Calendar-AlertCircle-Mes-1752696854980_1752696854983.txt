import React, { useState, useEffect } from 'react';
import { Plus, User, Calendar, AlertCircle, MessageSquare, Bell, Search, Filter, Settings, LogOut } from 'lucide-react';

const TaskManagementApp = () => {
  const [tasks, setTasks] = useState({
    todo: [
      {
        id: 'task-1',
        title: 'Design user authentication flow',
        description: 'Create wireframes and mockups for login/signup',
        assignee: 'Sarah Chen',
        priority: 'high',
        dueDate: '2024-07-20',
        tags: ['design', 'auth'],
        comments: 3
      },
      {
        id: 'task-2',
        title: 'Set up PostgreSQL database',
        description: 'Configure database schema and admin user',
        assignee: 'Mike Johnson',
        priority: 'medium',
        dueDate: '2024-07-18',
        tags: ['backend', 'database'],
        comments: 1
      }
    ],
    inprogress: [
      {
        id: 'task-3',
        title: 'Implement drag & drop functionality',
        description: 'Add React Beautiful DnD to kanban board',
        assignee: 'Alex Rodriguez',
        priority: 'high',
        dueDate: '2024-07-19',
        tags: ['frontend', 'react'],
        comments: 5
      }
    ],
    done: [
      {
        id: 'task-4',
        title: 'Firebase integration setup',
        description: 'Configure Firebase auth and real-time database',
        assignee: 'Emma Davis',
        priority: 'high',
        dueDate: '2024-07-16',
        tags: ['firebase', 'backend'],
        comments: 2
      }
    ]
  });

  const [showAddTask, setShowAddTask] = useState(false);
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    assignee: '',
    priority: 'medium',
    dueDate: '',
    tags: []
  });

  const [draggedTask, setDraggedTask] = useState(null);
  const [draggedFrom, setDraggedFrom] = useState(null);

  const [teamMembers] = useState([
    { id: 1, name: 'Sarah Chen', avatar: 'SC', status: 'online' },
    { id: 2, name: 'Mike Johnson', avatar: 'MJ', status: 'online' },
    { id: 3, name: 'Alex Rodriguez', avatar: 'AR', status: 'away' },
    { id: 4, name: 'Emma Davis', avatar: 'ED', status: 'online' }
  ]);

  const [activities, setActivities] = useState([
    { id: 1, user: 'Sarah Chen', action: 'moved task "Design user auth" to In Progress', time: '2 min ago' },
    { id: 2, user: 'Mike Johnson', action: 'commented on "PostgreSQL setup"', time: '5 min ago' },
    { id: 3, user: 'Alex Rodriguez', action: 'created new task "API endpoints"', time: '10 min ago' },
    { id: 4, user: 'Emma Davis', action: 'completed "Firebase integration"', time: '15 min ago' }
  ]);

  const columnTitles = {
    todo: 'To Do',
    inprogress: 'In Progress',
    done: 'Done'
  };

  const priorityColors = {
    high: 'bg-red-100 text-red-800 border-red-200',
    medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    low: 'bg-green-100 text-green-800 border-green-200'
  };

  const statusColors = {
    online: 'bg-green-400',
    away: 'bg-yellow-400',
    offline: 'bg-gray-400'
  };

  const handleDragStart = (e, task, fromColumn) => {
    setDraggedTask(task);
    setDraggedFrom(fromColumn);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, toColumn) => {
    e.preventDefault();
    
    if (!draggedTask || !draggedFrom) return;
    
    if (draggedFrom === toColumn) {
      setDraggedTask(null);
      setDraggedFrom(null);
      return;
    }

    const newTasks = { ...tasks };
    
    // Remove from source column
    newTasks[draggedFrom] = newTasks[draggedFrom].filter(task => task.id !== draggedTask.id);
    
    // Add to destination column
    newTasks[toColumn] = [...newTasks[toColumn], draggedTask];
    
    setTasks(newTasks);
    
    // Add activity
    const newActivity = {
      id: Date.now(),
      user: 'You',
      action: `moved task "${draggedTask.title}" from ${columnTitles[draggedFrom]} to ${columnTitles[toColumn]}`,
      time: 'just now'
    };
    setActivities([newActivity, ...activities]);
    
    setDraggedTask(null);
    setDraggedFrom(null);
  };

  const addTask = () => {
    if (!newTask.title.trim()) return;

    const task = {
      id: `task-${Date.now()}`,
      ...newTask,
      comments: 0,
      tags: newTask.tags.filter(tag => tag.trim() !== '')
    };

    setTasks({
      ...tasks,
      todo: [...tasks.todo, task]
    });

    // Add activity
    const newActivity = {
      id: Date.now(),
      user: 'You',
      action: `created new task "${task.title}"`,
      time: 'just now'
    };
    setActivities([newActivity, ...activities]);

    setNewTask({
      title: '',
      description: '',
      assignee: '',
      priority: 'medium',
      dueDate: '',
      tags: []
    });
    setShowAddTask(false);
  };

  const TaskCard = ({ task, columnId }) => (
    <div
      draggable
      onDragStart={(e) => handleDragStart(e, task, columnId)}
      className="bg-white rounded-lg shadow-sm border p-4 mb-3 hover:shadow-md transition-shadow cursor-grab active:cursor-grabbing"
    >
      <div className="flex items-start justify-between mb-2">
        <h3 className="font-semibold text-gray-800 text-sm">{task.title}</h3>
        <span className={`px-2 py-1 rounded-full text-xs font-medium border ${priorityColors[task.priority]}`}>
          {task.priority}
        </span>
      </div>
      
      <p className="text-gray-600 text-sm mb-3">{task.description}</p>
      
      <div className="flex flex-wrap gap-1 mb-3">
        {task.tags.map((tag, i) => (
          <span key={i} className="px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs">
            {tag}
          </span>
        ))}
      </div>
      
      <div className="flex items-center justify-between text-xs text-gray-500">
        <div className="flex items-center gap-2">
          <User className="w-3 h-3" />
          <span>{task.assignee}</span>
        </div>
        <div className="flex items-center gap-3">
          <div className="flex items-center gap-1">
            <Calendar className="w-3 h-3" />
            <span>{task.dueDate}</span>
          </div>
          <div className="flex items-center gap-1">
            <MessageSquare className="w-3 h-3" />
            <span>{task.comments}</span>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-gray-900">TaskFlow</h1>
              <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                Live Demo
              </span>
              <div className="ml-4 flex items-center gap-2 text-sm text-gray-600">
                <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                <span>Firebase Connected</span>
                <div className="w-2 h-2 bg-blue-400 rounded-full ml-2"></div>
                <span>PostgreSQL (discountmart_db_user)</span>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Search tasks..."
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              
              <button className="p-2 text-gray-400 hover:text-gray-600">
                <Filter className="w-5 h-5" />
              </button>
              
              <button className="p-2 text-gray-400 hover:text-gray-600 relative">
                <Bell className="w-5 h-5" />
                <span className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full text-white text-xs flex items-center justify-center">
                  3
                </span>
              </button>
              
              <div className="flex items-center space-x-2">
                {teamMembers.map((member) => (
                  <div key={member.id} className="relative">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                      {member.avatar}
                    </div>
                    <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white ${statusColors[member.status]}`}></div>
                  </div>
                ))}
              </div>
              
              <button className="p-2 text-gray-400 hover:text-gray-600">
                <Settings className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex gap-6">
          {/* Main Board */}
          <div className="flex-1">
            <div className="mb-6 flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">Project Dashboard</h2>
                <p className="text-gray-600 mt-1">Real-time collaborative task management</p>
              </div>
              <button
                onClick={() => setShowAddTask(true)}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2 transform hover:scale-105 transition-transform"
              >
                <Plus className="w-4 h-4" />
                Add Task
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {Object.entries(tasks).map(([columnId, columnTasks]) => (
                <div
                  key={columnId}
                  className="bg-gray-100 rounded-lg p-4 min-h-[500px]"
                  onDragOver={handleDragOver}
                  onDrop={(e) => handleDrop(e, columnId)}
                >
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-semibold text-gray-800">{columnTitles[columnId]}</h3>
                    <span className="bg-gray-200 text-gray-600 px-2 py-1 rounded-full text-sm">
                      {columnTasks.length}
                    </span>
                  </div>
                  
                  <div className="space-y-3">
                    {columnTasks.map((task) => (
                      <TaskCard key={task.id} task={task} columnId={columnId} />
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Activity Sidebar */}
          <div className="w-80 bg-white rounded-lg shadow-sm border p-6">
            <h3 className="font-semibold text-gray-800 mb-4">Recent Activity</h3>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {activities.map((activity) => (
                <div key={activity.id} className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                    <User className="w-4 h-4 text-blue-600" />
                  </div>
                  <div className="flex-1">
                    <p className="text-sm text-gray-800">
                      <span className="font-medium">{activity.user}</span> {activity.action}
                    </p>
                    <p className="text-xs text-gray-500 mt-1">{activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="mt-6 pt-4 border-t">
              <h4 className="font-medium text-gray-800 mb-3">Team Status</h4>
              <div className="space-y-2">
                {teamMembers.map((member) => (
                  <div key={member.id} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-medium">
                        {member.avatar}
                      </div>
                      <span className="text-sm text-gray-700">{member.name}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <div className={`w-2 h-2 rounded-full ${statusColors[member.status]}`}></div>
                      <span className="text-xs text-gray-500 capitalize">{member.status}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Add Task Modal */}
      {showAddTask && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold mb-4">Add New Task</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                <input
                  type="text"
                  value={newTask.title}
                  onChange={(e) => setNewTask({...newTask, title: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter task title"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea
                  value={newTask.description}
                  onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  rows={3}
                  placeholder="Enter task description"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Assignee</label>
                  <select
                    value={newTask.assignee}
                    onChange={(e) => setNewTask({...newTask, assignee: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select assignee</option>
                    {teamMembers.map((member) => (
                      <option key={member.id} value={member.name}>{member.name}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                  <select
                    value={newTask.priority}
                    onChange={(e) => setNewTask({...newTask, priority: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                <input
                  type="date"
                  value={newTask.dueDate}
                  onChange={(e) => setNewTask({...newTask, dueDate: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tags (comma-separated)</label>
                <input
                  type="text"
                  value={newTask.tags.join(', ')}
                  onChange={(e) => setNewTask({...newTask, tags: e.target.value.split(',').map(tag => tag.trim())})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="e.g., frontend, urgent, api"
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-3 mt-6">
              <button
                onClick={() => setShowAddTask(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={addTask}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                Add Task
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TaskManagementApp;